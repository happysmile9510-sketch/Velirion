{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-9b277d9253080c1618a836b6544eaa746cc708ae",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Presale.sol": "project/contracts/Presale.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Presale.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract Presale is Ownable, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n\r\n  error SaleNotActive();\r\n  error ZeroAddress();\r\n  error InvalidConfig();\r\n  error NothingToWithdraw();\r\n  error AlreadyExtended();\r\n\r\n  struct Phase {\r\n    uint256 priceWeiPerToken; // wei per 1 token unit (1e18)\r\n    uint256 allocation;       // tokens allocated for this phase (in 1e18 units)\r\n    uint256 sold;             // tokens sold in this phase (in 1e18 units)\r\n  }\r\n\r\n  IERC20 public immutable token;       // token being sold (18 decimals expected)\r\n  mapping(address => bool) public acceptedQuoteTokens; // dynamic set of accepted ERC20 quote tokens\r\n  address payable public immutable fundsRecipient;\r\n\r\n  uint256 public immutable saleStart;\r\n  uint256 public immutable saleEndInitial; // start + 90 days\r\n  uint256 public saleEnd;                  // starts as initial, may extend once by +30 days\r\n  bool public extended;\r\n\r\n  uint256 public immutable totalForSale;\r\n\r\n  uint256 public constant NUM_PHASES = 10;\r\n  Phase[NUM_PHASES] private phases;\r\n\r\n  bool public ethEnabled; // off by default, can be enabled later by owner\r\n\r\n  event PurchasedETH(address indexed buyer, uint256 ethSpent, uint256 tokensBought);\r\n  event PurchasedQuote(address indexed buyer, address indexed quote, uint256 quoteSpent, uint256 tokensBought);\r\n  event Extended(uint256 newSaleEnd);\r\n  event WithdrawnETH(uint256 amount);\r\n  event WithdrawnUnsold(address indexed to, uint256 amount);\r\n\r\n  constructor(\r\n    address owner_,\r\n    address token_,\r\n    address[] memory initialQuoteTokens_,\r\n    address payable fundsRecipient_,\r\n    uint256 totalForSale_,\r\n    uint256 basePriceQuotePerToken_,\r\n    uint256 priceIncrementPerPhaseQuote_,\r\n    uint256 perPhaseAllocation_, // if 0, defaults to totalForSale_/10\r\n    bool ethEnabled_\r\n  ) Ownable(owner_) {\r\n    if (token_ == address(0) || fundsRecipient_ == address(0)) revert ZeroAddress();\r\n    if (totalForSale_ == 0 || basePriceQuotePerToken_ == 0) revert InvalidConfig();\r\n\r\n    token = IERC20(token_);\r\n    fundsRecipient = fundsRecipient_;\r\n\r\n    saleStart = block.timestamp;\r\n    saleEndInitial = saleStart + 90 days;\r\n    saleEnd = saleEndInitial;\r\n\r\n    totalForSale = totalForSale_;\r\n\r\n    uint256 perPhase = perPhaseAllocation_ == 0 ? totalForSale_ / NUM_PHASES : perPhaseAllocation_;\r\n    // Ensure total phase allocation is at least totalForSale_ (last phase will effectively cap on available tokens)\r\n    for (uint256 i = 0; i < NUM_PHASES; i++) {\r\n      phases[i] = Phase({\r\n        priceWeiPerToken: basePriceQuotePerToken_ + (priceIncrementPerPhaseQuote_ * i),\r\n        allocation: perPhase,\r\n        sold: 0\r\n      });\r\n    }\r\n\r\n    ethEnabled = ethEnabled_;\r\n\r\n    // set initial accepted quote tokens\r\n    for (uint256 j = 0; j < initialQuoteTokens_.length; j++) {\r\n      address qt = initialQuoteTokens_[j];\r\n      if (qt == address(0)) revert ZeroAddress();\r\n      acceptedQuoteTokens[qt] = true;\r\n    }\r\n  }\r\n\r\n  // ======== Views ========\r\n\r\n  function isActive() public view returns (bool) {\r\n    return block.timestamp >= saleStart && block.timestamp <= saleEnd && totalSold() < totalForSale;\r\n  }\r\n\r\n  function totalSold() public view returns (uint256 sold) {\r\n    for (uint256 i = 0; i < NUM_PHASES; i++) {\r\n      sold += phases[i].sold;\r\n    }\r\n  }\r\n\r\n  function currentPhaseIndex() public view returns (uint256 index) {\r\n    for (uint256 i = 0; i < NUM_PHASES; i++) {\r\n      if (phases[i].sold < phases[i].allocation) {\r\n        return i;\r\n      }\r\n    }\r\n    return NUM_PHASES - 1; // all full; sales should be capped separately by totalForSale\r\n  }\r\n\r\n  function getPhase(uint256 index) external view returns (Phase memory) {\r\n    require(index < NUM_PHASES, \"bad phase\");\r\n    return phases[index];\r\n  }\r\n\r\n  // ======== Admin ========\r\n\r\n  function extendOnce() external onlyOwner {\r\n    if (extended) revert AlreadyExtended();\r\n    extended = true;\r\n    saleEnd += 30 days;\r\n    emit Extended(saleEnd);\r\n  }\r\n\r\n  function setEthEnabled(bool enabled) external onlyOwner {\r\n    ethEnabled = enabled;\r\n  }\r\n\r\n  function addQuoteToken(address tokenAddr) external onlyOwner {\r\n    if (tokenAddr == address(0)) revert ZeroAddress();\r\n    acceptedQuoteTokens[tokenAddr] = true;\r\n  }\r\n\r\n  function removeQuoteToken(address tokenAddr) external onlyOwner {\r\n    acceptedQuoteTokens[tokenAddr] = false;\r\n  }\r\n\r\n  function withdrawETH(uint256 amount) external onlyOwner {\r\n    if (amount == 0) revert NothingToWithdraw();\r\n    (bool ok, ) = fundsRecipient.call{value: amount}(\"\");\r\n    require(ok, \"withdraw failed\");\r\n    emit WithdrawnETH(amount);\r\n  }\r\n\r\n  function withdrawUnsold(address to) external onlyOwner {\r\n    if (block.timestamp <= saleEnd) revert SaleNotActive(); // only after sale end\r\n    uint256 bal = token.balanceOf(address(this));\r\n    if (bal == 0) revert NothingToWithdraw();\r\n    token.safeTransfer(to, bal);\r\n    emit WithdrawnUnsold(to, bal);\r\n  }\r\n\r\n  function depositTokens(uint256 amount) external onlyOwner {\r\n    // owner must approve before calling if using transferFrom pattern; we choose simple transfer to contract\r\n    token.safeTransferFrom(_msgSender(), address(this), amount);\r\n  }\r\n\r\n  // ======== Purchasing ========\r\n\r\n  // ERC20 purchase path (e.g., USDC). Caller specifies a maximum quote amount to spend.\r\n  function buyWithQuote(address quoteTokenAddr, uint256 maxQuoteAmount) external nonReentrant {\r\n    if (!isActive()) revert SaleNotActive();\r\n    if (maxQuoteAmount == 0) revert InvalidConfig();\r\n    if (!acceptedQuoteTokens[quoteTokenAddr]) revert InvalidConfig();\r\n\r\n    uint256 remainingQuote = maxQuoteAmount;\r\n    uint256 totalTokensBought;\r\n    uint256 totalQuoteCost;\r\n    uint256[NUM_PHASES] memory planned; // tokens per phase to finalize after pulling funds\r\n\r\n    for (uint256 i = currentPhaseIndex(); i < NUM_PHASES && remainingQuote > 0; i++) {\r\n      Phase storage p = phases[i];\r\n      if (p.sold >= p.allocation) {\r\n        continue;\r\n      }\r\n\r\n      uint256 phaseRemaining = p.allocation - p.sold;\r\n      uint256 tokensAffordable = remainingQuote * 1e18 / p.priceWeiPerToken;\r\n      if (tokensAffordable == 0) break;\r\n\r\n      uint256 tokensToBuy = tokensAffordable < phaseRemaining ? tokensAffordable : phaseRemaining;\r\n\r\n      // Cap by totalForSale\r\n      uint256 soldBefore = totalSold();\r\n      if (soldBefore + tokensToBuy > totalForSale) {\r\n        tokensToBuy = totalForSale - soldBefore;\r\n      }\r\n\r\n      if (tokensToBuy == 0) break;\r\n\r\n      uint256 cost = tokensToBuy * p.priceWeiPerToken / 1e18;\r\n\r\n      planned[i] = tokensToBuy;\r\n      totalTokensBought += tokensToBuy;\r\n      totalQuoteCost += cost;\r\n      remainingQuote -= cost;\r\n\r\n      if (totalSold() + totalTokensBought >= totalForSale) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(totalTokensBought > 0, \"insufficient funds\");\r\n\r\n    // Pull exact required quote from buyer directly to recipient\r\n    IERC20(quoteTokenAddr).safeTransferFrom(msg.sender, fundsRecipient, totalQuoteCost);\r\n\r\n    // Finalize sales state and deliver tokens\r\n    for (uint256 i = 0; i < NUM_PHASES; i++) {\r\n      uint256 t = planned[i];\r\n      if (t > 0) {\r\n        phases[i].sold += t;\r\n      }\r\n    }\r\n\r\n    token.safeTransfer(msg.sender, totalTokensBought);\r\n\r\n    emit PurchasedQuote(msg.sender, quoteTokenAddr, totalQuoteCost, totalTokensBought);\r\n  }\r\n\r\n  // ETH purchase path (disabled by default)\r\n  receive() external payable {\r\n    require(ethEnabled, \"ETH disabled\");\r\n    buyWithETH();\r\n  }\r\n\r\n  function buyWithETH() public payable nonReentrant {\r\n    if (!ethEnabled) revert InvalidConfig();\r\n    if (!isActive()) revert SaleNotActive();\r\n    if (msg.value == 0) revert InvalidConfig();\r\n\r\n    uint256 remainingValue = msg.value;\r\n    uint256 totalTokensBought;\r\n\r\n    for (uint256 i = currentPhaseIndex(); i < NUM_PHASES && remainingValue > 0; i++) {\r\n      Phase storage p = phases[i];\r\n      if (p.sold >= p.allocation) continue;\r\n\r\n      uint256 phaseRemaining = p.allocation - p.sold;\r\n      uint256 tokensAffordable = remainingValue * 1e18 / p.priceWeiPerToken;\r\n      if (tokensAffordable == 0) break;\r\n\r\n      uint256 tokensToBuy = tokensAffordable < phaseRemaining ? tokensAffordable : phaseRemaining;\r\n\r\n      uint256 soldBefore = totalSold();\r\n      if (soldBefore + tokensToBuy > totalForSale) {\r\n        tokensToBuy = totalForSale - soldBefore;\r\n      }\r\n\r\n      if (tokensToBuy == 0) break;\r\n\r\n      uint256 cost = tokensToBuy * p.priceWeiPerToken / 1e18;\r\n\r\n      p.sold += tokensToBuy;\r\n      totalTokensBought += tokensToBuy;\r\n      remainingValue -= cost;\r\n\r\n      if (totalSold() >= totalForSale) break;\r\n    }\r\n\r\n    require(totalTokensBought > 0, \"insufficient ETH\");\r\n\r\n    // deliver tokens\r\n    token.safeTransfer(msg.sender, totalTokensBought);\r\n\r\n    // forward ETH minus refund to fundsRecipient\r\n    uint256 spent = msg.value - remainingValue;\r\n    if (spent > 0) {\r\n      (bool ok1, ) = fundsRecipient.call{value: spent}(\"\");\r\n      require(ok1, \"forward failed\");\r\n    }\r\n\r\n    if (remainingValue > 0) {\r\n      (bool ok2, ) = msg.sender.call{value: remainingValue}(\"\");\r\n      require(ok2, \"refund failed\");\r\n    }\r\n\r\n    emit PurchasedETH(msg.sender, spent, totalTokensBought);\r\n  }\r\n}\r\n\r\n\r\n"
      }
    }
  }
}